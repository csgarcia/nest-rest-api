import { Test, TestingModule } from '@nestjs/testing';
import { ImplementationController } from '../implementation.controller';
import {ImplementationService} from '../implementation.service';
import {GetProductInfoDto} from '../dto/get-product-info.dto';
import {HttpStatus} from '@nestjs/common';

describe('ImplementationController', () => {
  let controller: ImplementationController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [ImplementationController],
      providers: [
        {
          provide: ImplementationService,
          useValue: {
            getProductInfo: jest.fn().mockResolvedValue({
              success: true,
              code: HttpStatus.OK,
              data: {
                product: {
                  _id: '61cbe84fcc0ac737a5b145e3',
                  enabled: true,
                  price: 12.5,
                  description: 'SomeData',
                  name: 'Product name updated',
                  sku: 'SKU123777',
                },
                productExtras: [
                  {
                    _id: '61cbe8a5de73c9af1eb4cff6',
                    enabled: true,
                    description: 'This is extra data',
                    name: 'someName',
                    productId: '61cbe84fcc0ac737a5b145e3',
                  },
                  {
                    _id: '61cbe8a5de73c9af1eb4cff7',
                    enabled: true,
                    description: 'Extra data for product',
                    name: 'someName 2',
                    productId: '61cbe84fcc0ac737a5b145e3',
                  }
                ],
                externalApiInfo: {
                  info: 'This is an string generated by mockapi.io for tekton challenge using external apis',
                  externalProductId: 'mockId'
                }
              }
            })
          }
        }
      ]
    }).compile();
    controller = module.get<ImplementationController>(ImplementationController);
  });

  describe('getProductInfo', () => {
    it('should return valid product information', async() => {
      const res: any = {
        status: jest.fn().mockReturnThis(),
        json: jest.fn()
      };
      const getProductInfoDto: GetProductInfoDto = {
        productId: 'someId'
      };
      await controller.getProductInfo(res, getProductInfoDto);
      expect(res.status.mock.calls).toEqual([
        [200]
      ]);
      expect(res.json.mock.calls).toEqual([
        [
          {
            product: {
              _id: '61cbe84fcc0ac737a5b145e3',
              enabled: true,
              price: 12.5,
              description: 'SomeData',
              name: 'Product name updated',
              sku: 'SKU123777',
            },
            productExtras: [
              {
                _id: '61cbe8a5de73c9af1eb4cff6',
                enabled: true,
                description: 'This is extra data',
                name: 'someName',
                productId: '61cbe84fcc0ac737a5b145e3',
              },
              {
                _id: '61cbe8a5de73c9af1eb4cff7',
                enabled: true,
                description: 'Extra data for product',
                name: 'someName 2',
                productId: '61cbe84fcc0ac737a5b145e3',
              }
            ],
            externalApiInfo: {
              info: 'This is an string generated by mockapi.io for tekton challenge using external apis',
              externalProductId: 'mockId'
            }
          }
        ]
      ]);
    });
  });

});
